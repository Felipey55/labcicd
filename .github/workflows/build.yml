# Workflow name
name: CI/CD Pipeline

on:
  # Manually trigger workflow runs
  workflow_dispatch:
  # Trigger the workflow on push from the main branch
  push:
    branches:
      - main

jobs:
  # Unit tests job
  tests:
    name: Unit tests
    # Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    # Job's steps
    steps:
      # Check out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      # Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'
      # Set up Maven cache
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Run tests
      - name: Run Tests
        run: mvn -B test

  # SonarCloud analysis job
  sonar:
    name: SonarCloud analysis
    # Depends on the tests job
    needs: tests
    # Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    # Job's steps
    steps:
      # Check out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      # Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'
      # Set up SonarCloud cache
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      # Set up Maven cache (SonarCloud)
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Analyze project with SonarCloud
      - name: Analyze with SonarCloud
        run: mvn -B verify sonar:sonar -Dsonar.projectKey=Felipey55_labcicd -Dsonar.organization=felipey55 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Build job
  build:
    # Depends on sonar's job
    needs: sonar
    name: Build
    # Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      # Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      # Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'
      # Set up Maven cache
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      # Upload JAR as artifact
      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: target/labcicd-0.0.1-SNAPSHOT.jar

      # Build & push Docker image
      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: felipey55/labcicd
          tags: latest
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  # Deploy to AWS Elastic Beanstalk
  deploy:
    needs: build
    runs-on: ubuntu-latest
    name: Deploy to AWS Elastic Beanstalk
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: artifact

      - name: Deploy to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          zip -r application.zip .
          aws elasticbeanstalk create-application-version --application-name <app-name> \
            --version-label <version> --source-bundle S3Bucket="my-bucket",S3Key="application.zip"
          aws elasticbeanstalk update-environment --application-name <app-name> \
            --environment-name <env-name> --version-label <version>
